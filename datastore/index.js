const fs = require('fs');
const path = require('path');
const _ = require('underscore');
const counter = require('./counter');
const Promise = require('bluebird');
const readFileAsync = Promise.promisify(require('fs').readFile);

// var items = {};

// Public API - Fix these CRUD functions ///////////////////////////////////////

exports.create = (text, callback) => {
  // On ADD todo, we take the id (generated by counter.getNextUniqueId) and create a new 
  // file. The contents of the file is in var TEXT and the callback needs to 
  counter.getNextUniqueId(function(err, id) {
    if (err) {
      callback(err);
    } else {
      const filePath = path.join(exports.dataDir, id + '.txt');
      fs.writeFile(path.join(filePath), text, function(err) {
        // console.log(filePath);
        // console.log("file written");
        if (err) {
          callback(err);
        } else {
          // this call back sends the todo as a response from the server.
          callback(null, { id, text });
        }
      });
    }
  });
};

exports.readAll = (callback) => {
  //read through our directory data file, taking in each filepath and a callback on errors and files in data array
  fs.readdir(exports.dataDir, function(err, files) {
    //if error
    if (err) {
      //return callback error
      return callback(err);
    }
    //create an array of promises - a promise for each file
    var data = _.map(files, (file) => {
      //each file has a filepath
      var filePath = path.join(exports.dataDir, file);
      //and an id
      var id = file.split('.')[0];
      //return a promise that is our
      //promisified readFile function taking in the filepath and a callback --this creates our array of promises
      //that when readFileAsync's promise resolves, we ".then" return our object
      return readFileAsync(filePath).then(function(text){
        return { id: id, text: text.toString() }
      });
    });
    // promise.all --- runs through our array of promises (data) and returns a promise
  //once all promises in data have resolved, ".then" invoke callback on all of the
  //items in the array
    Promise.all(data).then(function(items) {
      callback(null, items);
    });
  });
  
  // Read Directory
  // Promisify readFile to read file
  // get TEXT and ID from readFile
  // Return A Promise
  // add promise to array
  // Promise.all(array).then (function(todos) {callback(null, todos)})
};

// We are trying to read the contents of ONE of our files.
exports.readOne = (id, callback) => {
  // Invoke the fs.readFile and pass in the filepath of the specific id
  fs.readFile(path.join(exports.dataDir, id + '.txt'), function(err, contents) {
    if (err) {
      // On error, invoke the callback and pass the err as an argument
      callback(err);
    } else {
      // On successful read, invoke the callback
      callback(null, {id, text: contents.toString()});
    }
  });
};

exports.update = (id, text, callback) => {
  // fs.readFile based on id
  fs.readFile(path.join(exports.dataDir, id + '.txt'), function(err, contents) {
    if (err) {
      // callback on err
      callback(err);
    } else {
      // callback on success
      // fs.writeFile based on id new text
      fs.writeFile(path.join(exports.dataDir, id + '.txt'), text, function(err) {
        if (err) {
          // callback on err
          callback(err);
        } else {
          // call back on success
          callback(null, {id, text});
        }
      });
    }
  });
};

exports.delete = (id, callback) => {
  // invoke fs.unlink with filepath w/ id
  // invoke callback on error
  fs.unlink(path.join(exports.dataDir, id + '.txt'), function(err) {
    if (err) {
      callback(err);
    } else {
      callback();
    }
  });
};

// Config+Initialization code -- DO NOT MODIFY /////////////////////////////////

exports.dataDir = path.join(__dirname, 'data');

exports.initialize = () => {
  if (!fs.existsSync(exports.dataDir)) {
    fs.mkdirSync(exports.dataDir);
  }
};
